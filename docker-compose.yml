services:
    #PHP Service
    web:
        build:
            context: ./
            dockerfile: ./docker/web/Dockerfile
        container_name: ${APP_NAME}_web
        working_dir: /var/www/html
        volumes:
            - ./:/var/www/html
            # improve performance
#            - "./vendor:/var/www/html/vendor"
#            - "./vendor:/var/www/html/node_modules"
        env_file:
            - .env
        tty: true
        depends_on:
            mysql:
                condition: service_healthy
        networks:
            - backend

    #Nginx Service
    webserver:
        image: nginx:1.23.4-alpine
        container_name: ${APP_NAME}_webserver
        restart: unless-stopped
        ports:
            - "${APP_PORT}:80"
        volumes:
            - ./:/var/www/html
            - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        networks:
            - backend
    #MySQL Service
    mysql:
        image: mysql:8.0
        container_name: ${APP_NAME}_mysql
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_USER: ${DB_USERNAME}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
        volumes:
            - ./docker/data/mysql:/var/lib/mysql/
            - ./docker/init/grant_to_dbuser.sql:/docker-entrypoint-initdb.d/grant_to_dbuser.sql
            - ./docker/init/create_databases.sql:/docker-entrypoint-initdb.d/create_databases.sql
        ports:
            - "33060:3306"
        networks:
            - backend
        healthcheck:
            test: mysqladmin ping
            interval: 3s
            timeout: 3s
            retries: 3
    redis:
        image: redis:latest
        container_name: ${APP_NAME}_redis
        volumes:
            - ./docker/data/redis:/data
        environment:
            - ALLOW_EMPTY_PASSWORD=yes
        ports:
            - "63790:6379"
        restart: unless-stopped
        networks:
            - backend
        healthcheck:
            test: [ 'CMD', 'redis-cli', 'ping' ]
            interval: 30s
            timeout: 10s
            retries: 5
    laravel_echo_server:
        container_name: ${APP_NAME}_laravel_echo_server
        build:
            context: ./docker/laravel-echo-server
            dockerfile: Dockerfile
        ports:
            -   "60010:6001"
        volumes:
            - .env:/app/.env
        restart: unless-stopped
        networks:
            - backend
networks:
    backend:
        driver: bridge
